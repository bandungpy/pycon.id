// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex", "metrics", "views"]
}

model User {
  id String @id @default(cuid())

  email        String    @unique
  firstName    String
  lastName     String?
  displayName  String?
  username     String    @unique
  phone        String?
  password     String?
  token        String?
  organisation String?
  jobTitle     String?
  tShirtSize   String?
  gender       String?
  dateOfBirth  DateTime?
  bio          String?   @db.Text
  interest     String?
  lookingFor   String?
  country      String?
  state        String?
  city         String?
  address      String?
  website      String?
  github       String?
  facebook     String?
  linkedin     String?
  twitter      String?
  instagram    String?

  role   UserRole? @relation(fields: [roleId], references: [id])
  roleId String?

  participantType   ParticipantType? @relation(fields: [participantTypeId], references: [id])
  participantTypeId String?

  JobCategory   JobCategory? @relation(fields: [jobCategoryId], references: [id])
  jobCategoryId String?

  IndustryCategory   IndustryCategory? @relation(fields: [industryCategoryId], references: [id])
  industryCategoryId String?

  PublicFields   PublicFields? @relation(fields: [publicFieldsId], references: [id])
  publicFieldsId String?       @unique

  compliance       UserCompliance? @relation(fields: [userComplianceId], references: [id])
  userComplianceId String?         @unique

  ticketTransactions  TicketTransaction[]
  vouchers            Voucher[]
  voucherTransactions VoucherTransaction[]

  speaker    Speaker? // User can link as the Speaker
  userVerify UserVerify[]

  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  emailVerifiedAt DateTime? @db.Timestamp(0)

  @@index([roleId])
  @@index([participantTypeId])
  @@index([jobCategoryId])
  @@index([industryCategoryId])
  @@index([publicFieldsId])
}

model UserVerify {
  id String @id @default(cuid())

  token  String @unique
  type   String // verify | reset-password
  user   User   @relation(fields: [userId], references: [id])
  userId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model UserRole {
  id String @id @default(cuid())

  sequence    Int    @unique // 1 | 2 | 3 | ...
  symbol      String @unique // "ADMIN" | "MANAGER" | "EDITOR"
  name        String @unique // "Administrator" | "Manager" | "Editor"
  description String @db.Text // "Manage everything"

  users User[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ParticipantType {
  id String @id @default(cuid())

  symbol      String  @unique // "NON_PARTICIPANT" | "IN_PERSON_PARTICIPANT" | "ONLINE_PARTICIPANT" | "COMMITEE" | "SPEAKER" | "SPONSOR" | "COMMUNITY" | "VOLUNTEER" | "PATRON"
  name        String  @unique // "Participant" | "In Person Participant" | "Online Participant" | "Commitee" | "Speaker" | "Sponsor" | "Community" | "Volunteer" | "Patron"
  description String? @db.Text // "Manage everything"

  users    User[]
  tickets  Ticket[]
  vouchers Voucher[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model JobCategory {
  id String @id @default(cuid())

  symbol      String  @unique // EXAMPLE : "STUDENT" | "TECH_SPECIALIST"
  name        String  @unique // Example : "Student" | "Tech Specialist"
  description String? @db.Text // "Manage everything"

  users User[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model IndustryCategory {
  id String @id @default(cuid())

  symbol      String  @unique // EXAMPLE : "HEALTH_CARE" | "AGRICULTURE"
  name        String  @unique // Example : "Health Care" | "Agriculture"
  description String? @db.Text // "Agriculture blablablah"

  users User[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserCompliance {
  id String @id @default(cuid())

  codeOfConduct  Boolean @default(false)
  termsOfService Boolean @default(false)

  user User?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PublicFields {
  id String @id @default(cuid())

  company Boolean @default(false)
  gender  Boolean @default(false)
  phone   Boolean @default(false)
  address Boolean @default(false)
  socials Boolean @default(false)

  users User?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Speaker {
  id String @id @default(cuid())

  slug String  @unique
  name String  @unique
  bio  String?

  // Speaker can link with their User account
  user   User?   @relation(fields: [userId], references: [id])
  userId String? @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model Ticket {
  id String @id @default(cuid())

  name  String
  quota Int
  price Int

  participantType   ParticipantType? @relation(fields: [participantTypeId], references: [id])
  participantTypeId String?

  earlyBird   Boolean @default(false)
  description String? @db.Text

  transactions TicketTransaction[]
  features     TicketFeature[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([participantTypeId])
}

model TicketFeature {
  id String @id @default(cuid())

  feature String?

  ticket   Ticket? @relation(fields: [ticketId], references: [id])
  ticketId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([ticketId])
}

model TicketTransaction {
  id String @id @default(cuid())

  status      String  @default("pending")
  description String?

  ticket        Ticket? @relation(fields: [ticketId], references: [id])
  ticketId      String?
  paymentId     String
  paymentLink   String  @default("https://pycon.id")
  transactionId String
  totalPrice Int @default(0)

  voucherTransaction VoucherTransaction?

  user   User?   @relation(fields: [userId], references: [id])
  userId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([ticketId])
}

model Voucher {
  id String @id @default(cuid())

  name    String
  code    String
  quota   Int     @default(0)
  private Boolean @default(false)

  discount    Int
  description String

  participantType   ParticipantType? @relation(fields: [participantTypeId], references: [id])
  participantTypeId String?

  transactions VoucherTransaction[]
  whitelists   VoucherWhitelist[]

  user   User?   @relation(fields: [userId], references: [id])
  userId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([participantTypeId])
}

model VoucherTransaction {
  id String @id @default(cuid())

  status      Boolean
  description String

  ticketTransaction   TicketTransaction @relation(fields: [ticketTransactionId], references: [id])
  ticketTransactionId String            @unique

  voucher   Voucher? @relation(fields: [voucherId], references: [id])
  voucherId String?

  user   User?   @relation(fields: [userId], references: [id])
  userId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([voucherId])
  @@index([userId])
}

model VoucherWhitelist {
  id String @id @default(cuid())

  email String

  voucher   Voucher? @relation(fields: [voucherId], references: [id])
  voucherId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([voucherId])
}
