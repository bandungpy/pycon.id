// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex", "metrics", "views"]
}

model User {
  id String @id @default(cuid())

  email    String @unique
  name     String
  username String @unique

  role   UserRole? @relation(fields: [roleId], references: [id])
  roleId String?

  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  TicketTransaction  TicketTransaction[]
  Voucher            Voucher[]
  VoucherTransaction VoucherTransaction[]

  @@index([roleId])
}

model UserRole {
  id String @id @default(cuid())

  sequence    Int    @unique // 1 | 2 | 3 | ...
  symbol      String @unique // "ADMIN" | "MANAGER" | "EDITOR"
  name        String @unique // "Administrator" | "Manager" | "Editor"
  description String @db.Text // "Manage everything"

  users User[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Speaker {
  id String @id @default(cuid())

  name String
  slug String  @unique
  bio  String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Ticket {
  id String @id @default(cuid())

  name  String
  quota Int
  price Int
  etc   String?
}

model TicketTransaction {
  id     String  @id @default(cuid())
  user   User?   @relation(fields: [userId], references: [id])
  userId String?

  status Boolean
  etc    String?

  @@index([userId])
}

model Voucher {
  id    String @id @default(cuid())
  name  String
  code  String
  quota Int    @default(0)

  requirement   VoucherRequirement? @relation(fields: [requirementId], references: [id])
  requirementId String?

  discount           Int
  etc                String
  User               User?                @relation(fields: [userId], references: [id])
  userId             String?
  VoucherTransaction VoucherTransaction[]

  @@index([requirementId])
  @@index([userId])
}

model VoucherRequirement {
  id      String    @id @default(cuid())
  etc     String
  Voucher Voucher[]
}

model VoucherTransaction {
  id     String  @id @default(cuid())
  User   User?   @relation(fields: [userId], references: [id])
  userId String?

  Voucher   Voucher? @relation(fields: [voucherId], references: [id])
  voucherId String?

  status Boolean
  etc    String

  @@index([voucherId])
  @@index([userId])
}
